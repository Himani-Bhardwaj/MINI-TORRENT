#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <fcntl.h>
#include <iostream>
#include <dirent.h>
#include <sys/stat.h>
#include <chrono> 
#include <ctime>
#include <sstream>
using namespace std;

bool is_file(const char* path) {
    struct stat buf;
    stat(path, &buf);
    return S_ISREG(buf.st_mode);
}

bool is_dir(const char* path) {
    struct stat buf;
    stat(path, &buf);
    return S_ISDIR(buf.st_mode);
}
void callDirectoryTransfer(int argc,char **argv){
	unsigned char buffer[4096];
		int fd1, fd2;
		long int n1;
		struct dirent *de;
		DIR *sourcedr = opendir(argv[1]);
		string inputFile = argv[1];
		string outPutFile =argv[2];
		DIR *destdr = opendir(argv[2]);
		if (sourcedr == NULL)
   		 { 
       			 cout<<"Could not open source directory" ; 
       			 return; 
   		 } 
		if (destdr == NULL)  
		    { 
		        cout<<"Could not open destination directory";
			return ;
		    } 
		while((de = readdir(sourcedr)) != NULL){
		string sourceName = inputFile + "/" +	string(de->d_name);	
		fd1 = open(sourceName.c_str(), O_RDONLY);
		string fname =  string(argv[2]) + "/"+string(de->d_name);
		fd2=open(fname.c_str(),O_CREAT|O_WRONLY|O_TRUNC, 0700);
		if(fd1 == -1){
		//	cout<<"file not found"<<endl;
		}
		else{
		while ( (n1 = read(fd1, buffer, 4096)) > 0){
        		if(write(fd2, buffer, n1) != n1){
           		 perror("writing problem ");
            		exit(3);
        		}
    			}
		}
			close(fd1);
			close(fd2);
	}
	closedir(sourcedr);
	closedir(destdr);
}

void callFileTransfer(int argc,char **argv){
		long long int limit= 1024*1024*1024*4;
		long long int count = 0;
		int i=1;		
		int fd1, fd2;
		char buffer[4096];
		long long int n1;
		fd2=open(argv[argc-1],O_CREAT|O_WRONLY, 0700);
		for(int i=1;i< argc-1;i++){
		int fd1 = open(argv[i], O_RDONLY);
		if(fd1 == -1){
			cout<<"file not found"<<endl;
		}
		else{
			while ( (n1 = read(fd1, buffer, 4096)) > 0){        		
			cout<<n1;			
			count += n1;
			cout<<count<<endl;			
			if(write(fd2, buffer, n1) != n1){
           		 perror("writing problem ");
            		exit(3);
        		}
			else{
				if(count >= limit){
				close(fd2); int j=0;
				istringstream ss(argv[argc-1]);
				string token,part[2];
				while(std::getline(ss, token, '.')) {
				    part[j] = token; j++;
				}
				string newName = part[0]+"_"+to_string(i)+"."+part[1];
				fd2=open(newName.c_str(),O_CREAT|O_WRONLY, 0700);
				i++;
				count = 0;
				}
			}
    		    }

		}
		close(fd1);
		close(fd2);
	}
}
void callFileToDirectoryTransfer(int argc,char **argv){
		int fd1, fd2;
		char buffer[4096];
		long int n1;cout<<argc;
		for(int i=1;i< argc-1;i++){
		int fd1 = open(argv[i], O_RDONLY);
		string fname =  string(argv[argc-1]) + "/"+string(argv[i]);
		fd2=open(fname.c_str(),O_CREAT|O_WRONLY|O_TRUNC, 0700);
		if(fd1 == -1){
			cout<<"file not found"<<endl;
		}
		else{
			while ( (n1 = read(fd1, buffer, 4096)) > 0){
        		if(write(fd2, buffer, n1) != n1){
           		 perror("writing problem ");
            		exit(3);
        		}
    			}

		}
		close(fd1);
		close(fd2);
	}
}
int main(int argc,char **argv)
{
	std::chrono::time_point<std::chrono::system_clock> start, end;
	start = std::chrono::system_clock::now();
	if(is_dir(argv[1]) && is_dir(argv[2])){
		callDirectoryTransfer(argc,argv);
	}
	else if(is_file(argv[1]) && is_file(argv[2]) && argc == 3){
		callFileTransfer(argc,argv);
	}	
	else{
		callFileToDirectoryTransfer(argc,argv);
	}
	end = std::chrono::system_clock::now();
	std::chrono::duration<double> elapsed_seconds = end - start; 
	cout<<"Time Taken for Transer is : " << elapsed_seconds.count() << " s "<< endl;
	return 0;
}
